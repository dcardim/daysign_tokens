'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _theo = require('theo');

var _theo2 = _interopRequireDefault(_theo);

var _loaderUtils = require('loader-utils');

var _loaderUtils2 = _interopRequireDefault(_loaderUtils);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /**
                                                                                                                                                                                                                              * Copyright 2016 Autodesk Inc. http://www.autodesk.com
                                                                                                                                                                                                                              *
                                                                                                                                                                                                                              * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                              * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                              * You may obtain a copy of the License at
                                                                                                                                                                                                                              *
                                                                                                                                                                                                                              *     http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                              *
                                                                                                                                                                                                                              * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                              * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                              * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                              * See the License for the specific language governing permissions and
                                                                                                                                                                                                                              * limitations under the License.
                                                                                                                                                                                                                              */

var DEFAULT_TRANSFORM = 'web';
var DEFAULT_FORMAT = 'common.js';

module.exports = function theoLoader(content) {
    var _this = this;

    // Return any options to pass to the theo transform and format plugins for the given transform/format pair.
    var mergeOptions = function mergeOptions(loaderOptions, queryOptions) {
        var getOptions = loaderOptions.getOptions,
            otherLoaderOptions = _objectWithoutProperties(loaderOptions, ['getOptions']);

        var options = _extends({}, otherLoaderOptions, queryOptions || {});

        if (typeof options.transform === 'string') {
            options.transform = {
                type: options.transform
            };
        }

        if (typeof options.format === 'string') {
            options.format = {
                type: options.format
            };
        }

        if (typeof getOptions === 'function') {
            options = getOptions(options);
        }

        return options;
    };

    // Recursively add dependencies on imported Design Tokens files
    var addImportDependencies = function addImportDependencies(jsonString, filePath) {
        var _JSON$parse = JSON.parse(jsonString),
            imports = _JSON$parse.imports;

        if (!imports) {
            return;
        }

        imports.forEach(function (importPath) {
            var importPathAbs = _path2.default.resolve(_path2.default.dirname(filePath), importPath);
            _this.addDependency(importPathAbs);

            // Now add *this* file's dependencies
            addImportDependencies(_fs2.default.readFileSync(importPathAbs, 'utf8'), importPathAbs);
        });
    };

    // Return the output of theo as a Javascript module definition.
    var moduleize = function moduleize(theoOutput, formatType) {
        var moduleized = void 0;
        if (/js$/.test(formatType)) {
            // These are already javascripts modules, either CommonJS or AMD
            moduleized = theoOutput;
        } else {
            var moduleContent = void 0;
            if (/json$/.test(formatType)) {
                moduleContent = theoOutput;
            } else {
                // Export everything else as a string
                var escaped = theoOutput.replace(/\n/g, '\\n').replace(/"/g, '\\"');
                moduleContent = '"' + escaped + '"';
            }
            moduleized = 'module.exports = ' + moduleContent + ';';
        }
        return moduleized;
    };

    this.cacheable();
    var callback = this.async();

    var jsonContent = void 0;
    try {
        // Assume the content is a serialized module
        jsonContent = JSON.stringify(this.exec(content, this.resourcePath));
    } catch (e) {
        // Fall back to assuming its serialized JSON
        jsonContent = content;
    }

    // Add a dependency on each of the imported Design Tokens files, recursively
    try {
        addImportDependencies(jsonContent, this.resourcePath);
    } catch (e) {
        process.nextTick(function () {
            callback(e);
        });
        return;
    }

    // Parse the transform and format from the query in the request
    var query = this.query && _loaderUtils2.default.parseQuery(this.query);

    var _mergeOptions = mergeOptions(this.options.theo || {}, query),
        format = _mergeOptions.format,
        transform = _mergeOptions.transform,
        otherMergedOptions = _objectWithoutProperties(_mergeOptions, ['format', 'transform']);

    var transformType = transform && transform.type || DEFAULT_TRANSFORM;
    var formatType = format && format.type || DEFAULT_FORMAT;

    _theo2.default.convert(_extends({}, otherMergedOptions, {
        transform: _extends({}, transform || {}, {
            // theo will choke if file path does not end with ".json"
            file: this.resourcePath.replace(/\.[^.]+$/, '.json'),
            data: jsonContent,
            type: transformType
        }),
        format: _extends({}, format || {}, {
            type: formatType
        })
    })).then(function (result) {
        // Convert the result into a JS module
        callback(null, moduleize(result, formatType));
    }).catch(callback);
};